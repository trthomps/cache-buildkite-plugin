#!/bin/bash

if [ -z "${BUILDKITE_PLUGIN_GCS_CACHE_BUCKET}" ]; then
  echo '+++ ðŸš¨ Missing GCS bucket configuration'
  exit 1
fi

# Detect which GCS CLI to use
detect_gcs_cli() {
  # Check for explicit preference
  if [ -n "${BUILDKITE_PLUGIN_GCS_CACHE_CLI}" ]; then
    echo "${BUILDKITE_PLUGIN_GCS_CACHE_CLI}"
    return
  fi

  # Auto-detect: prefer gcloud storage if available
  if command -v gcloud &>/dev/null && gcloud storage --help &>/dev/null 2>&1; then
    echo "gcloud"
  elif command -v gsutil &>/dev/null; then
    echo "gsutil"
  else
    echo '+++ ðŸš¨ Neither gcloud storage nor gsutil found' >&2
    exit 1
  fi
}

# Lazy load CLI selection
get_gcs_cli() {
  if [ -z "${GCS_CLI}" ]; then
    GCS_CLI=$(detect_gcs_cli)
  fi
  echo "${GCS_CLI}"
}

build_key() {
  if [ -n "${BUILDKITE_PLUGIN_GCS_CACHE_PREFIX}" ]; then
    echo "${BUILDKITE_PLUGIN_GCS_CACHE_PREFIX}/${1}"
  else
    echo "$1"
  fi
}

gcs_cmd() {
  local cmd_args=()
  local cli
  cli=$(get_gcs_cli)

  if [ "${cli}" = "gcloud" ]; then
    cmd_args=(gcloud storage)
    if [ -n "${BUILDKITE_PLUGIN_GCS_CACHE_QUIET}" ]; then
      cmd_args+=(--verbosity=none)
    fi
  else
    cmd_args=(gsutil)
    if [ -n "${BUILDKITE_PLUGIN_GCS_CACHE_QUIET}" ]; then
      cmd_args+=(-q)
    fi
  fi

  "${cmd_args[@]}" "$@"
}

gcs_copy() {
  local from="$1"
  local to="$2"
  local use_rsync="${3:-true}"
  local cli
  cli=$(get_gcs_cli)

  if [ "${use_rsync}" = 'true' ]; then
    # Use rsync for directories
    if [ "${cli}" = "gcloud" ]; then
      gcs_cmd rsync -r -d "${from}" "${to}"
    else
      gcs_cmd -m rsync -r -d "${from}" "${to}"
    fi
  else
    # Use cp for single files
    gcs_cmd cp "${from}" "${to}"
  fi
}

gcs_exists() {
  local key="$1"
  local full_path="gs://${BUILDKITE_PLUGIN_GCS_CACHE_BUCKET}/$(build_key "${key}")"

  # Check if the object exists using ls
  # For directories, ls will list contents
  # For files, it will return the file path
  if gcs_cmd ls "${full_path}*" &>/dev/null; then
    return 0
  else
    return 1
  fi
}

restore_cache() {
  local from="$1"
  local to="$2"
  local use_rsync='false'
  local key="$(build_key "${from}")"
  local full_path="gs://${BUILDKITE_PLUGIN_GCS_CACHE_BUCKET}/${key}"

  # Check if it's a directory by trying to list it as a prefix
  if gcs_cmd ls "${full_path}/" &>/dev/null; then
    use_rsync='true'
  fi

  gcs_copy "${full_path}" "${to}" "${use_rsync}"
}

save_cache() {
  local to="$1"
  local from="$2"
  local use_rsync='true'
  local key="$(build_key "${to}")"
  local full_path="gs://${BUILDKITE_PLUGIN_GCS_CACHE_BUCKET}/${key}"

  if [ -f "${from}" ]; then
    use_rsync='false'
  fi

  gcs_copy "${from}" "${full_path}" "${use_rsync}"
}

exists_cache() {
  if [ -z "$1" ]; then exit 1; fi
  gcs_exists "$1"
}

OPCODE="$1"
shift

if [ "$OPCODE" = 'exists' ]; then
  exists_cache "$@"
elif [ "$OPCODE" = 'get' ]; then
  restore_cache "$@"
elif [ "$OPCODE" = 'save' ]; then
  save_cache "$@"
else
  exit 255
fi